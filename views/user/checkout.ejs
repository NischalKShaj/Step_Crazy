<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Step-Crazy/checkout</title>
    <link rel="icon" href="../../Img/login/login.jpg">
    <link rel="stylesheet" href="../../CSS/user/cart.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
  </head>

  <style>
    .dimmed-background {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5); /* Adjust the opacity as needed */
      display: none;
      z-index: 999;
    }
  
    .loader {
      border: 8px solid #f3f3f3; /* Light gray */
      border-top: 8px solid #3498db; /* Blue */
      border-radius: 50%;
      width: 40px;
      height: 40px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1000;
      display: none;
      animation: spin 2s linear infinite;
    }
  
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>

  <body>
    <div class="dimmed-background" id="dimmedBackground"></div>
    <div class="loader" id="loader"></div>
    <!-- header for the user profile -->
    <nav class="navbar navbar-expand-lg navbar-light shadow">
      <div class="container d-flex justify-content-between align-items-center">
        <a href="/">
          <img src="../../Img/login/logo.png" alt="logo" class="img-fluid w-50" />
        </a>
        <button class="navbar-toggler border-0" type="button" data-bs-toggle="collapse" data-bs-target="#templatemo_main_nav" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
  
        <div class="align-self-center collapse navbar-collapse flex-fill d-lg-flex justify-content-lg-between" id="templatemo_main_nav">
          <div class="flex-fill">
            <ul class="nav navbar-nav d-flex justify-content-between mx-lg-auto">
              <li class="nav-item">
                <a class="nav-link" href="/">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/about">About</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/product">Product</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/contact">Contact</a>
              </li>
            </ul>
          </div>
          
        </div>
      </div>
    </nav>

    <!-- content for the checkout page starts here -->

    <section class="checkout spad">
      <div class="container">
        <div class="row">
          <div class="col-lg-8">
            <h2 class="mt-4">Billing detail</h2>
            <div class="form-check">
              <div class="card" style="max-height: 600px; overflow-y: auto">
                <div class="card">
                  <div
                    style="background-color: rgb(15, 110, 253)"
                    class="card-header text-light"
                  >
                    Address
                  </div>
                  <% useAdd.forEach((userAddress) => { %> 
                
                    <%userAddress.address.forEach((address, index) => { %>
                  <div class="card-body">
                    <form class="row g-3">
                      <div style="margin-bottom: 30px" class="col-12">
                        <label for="address" class="form-label">Address</label>
                        <input
                          value="<%= address.fullAddress %>"
                          type="text"
                          class="form-control"
                          id="address"
                          readonly
                        />
                      </div>

                      <div class="col-md-6">
                        <label for="locality" class="form-label"
                          >Locality</label
                        >
                        <input
                          value="<%= address.locality %>"
                          type="text"
                          class="form-control"
                          id="locality"
                          readonly
                        />
                      </div>
                      <div class="col-md-3">
                        <label for="state" class="form-label">State</label>
                        <input
                          value="<%= address.state %>"
                          type="text"
                          class="form-control"
                          id="state"
                          readonly
                        />
                      </div>

                      <div class="col-md-3">
                        <label for="pincode" class="form-label">pincode</label>
                        <input
                          value="<%= address.pincode %>"
                          type="text"
                          class="form-control"
                          id="pincode"
                          readonly
                        />
                      </div>
                    </form>
                    <input
                      style="margin-left: 1px"
                      class="form-check-input address-checkbox"
                      type="radio"
                      name="flexRadioDefault"
                      id="flexRadio<%= index %>"
                      data-address="<%= JSON.stringify(address) %>"
                    />
                    <label
                      style="margin-left: 20px"
                      class="form-check-label"
                      id="flexRadio<%= index %>"
                    >
                      Select
                    </label>
                  </div>
                </div>

                <div class="card-header"><% }) %> 
                <% }) %>
                  </div>
              </div>

              <button
                type="button"
                class="btn btn-primary mt-3 mb-5"
                data-bs-toggle="modal"
                data-bs-target="#exampleModal"
              >
                Add address
              </button>
            </div>
          </div>

          <div class="col-lg-4">
            <div class="card" style="margin-top: 75px">
              <div class="card-body">
                <div class="checkout__order">
                  <h5>Orders</h5>
                  <div style="max-height: 350px; overflow-y: auto">
                    <table class="table checkout_order_product">
                      <thead>
                        <tr>
                          <th scope="col">No</th>
                          <th scope="col" style="padding-left: 30px">
                            Product
                          </th>
                          <th scope="col">Quantity</th>
                          <th scope="col" style="padding-left: 30px">Price</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% cartItem.forEach((item, index) => { %>
                        <tr>
                          <td class="text-center"><%= index + 1 %></td>
                          <td
                            class="text-center"
                            style="max-width: 120px; word-wrap: break-word"
                          >
                            <%= item.product.name %>
                            
                          </td>
                          <td class="text-center"><%= item.quantity %></td>
                          <td class="text-center font-weight-bold">
                            &#x20B9;<%= (item.product.price *
                            item.quantity).toFixed(2) %> 
                            <% let totalAmount = (item.product.price * item.quantity).toFixed(2) %>
                            
                          </td>
                          <td hidden id="totalPrice"><%= (item.product.price *item.quantity).toFixed(2) %> </td>

                          
                        </tr>
                        <% }) %>
                      </tbody>
                    </table>
                  </div>
                  <% let isWalletDisabled = false; %>
                  <% cartItem.forEach((item) => { %>
                    <div class="checkout_order_total">
                      <ul>
                        <% if (user.wallet <= item.quantity * item.product.price) { %>
                          <p style="color: red;">Insufficient balance in the wallet</p>
                          <% isWalletDisabled = true; %>
                        <% } %>
                        <li>Subtotal <span>&#x20B9;<i id="grandtotal"><%= item.product.price * item.quantity %></i></span></li>
                      </ul>
                    </div>
                  <% }) %>
                  <div id="clear"></div>
                  <section id="discountSection" hidden>
                    <ul>
                      <li><span id="discountPercent"></span></li>
                      <li><span id="amountAfterDiscount"></span></li>
                      <button class="btn btn-primary" type="button" id="clear-coupon" style="display: none;">Clear</button>
                    </ul>
                  </section>
                  <section hidden id="couponid"></section>
                  <i id="clear"></i>
                  
                  <div class="checkout_order_widget">
                    <div class="form-check">
                      <form id="coupon-form">
                        <div class="input-group">
                          <input id="coupon" type="text" placeholder="Enter your coupon code" class="form-control" name="code">
                          <button class="btn btn-primary" type="button" id="check-coupon">Check</button>
                        </div>
                      </form>
                       
                      <p id="errorMessage" style="color: red;"></p>

                      <button class="btn btn-primary" type="button" id="check-offers">Check Offers</button>
                      <div id="offers-container" style="display: none;"></div>
                      
                    </div>
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="radio"
                        name="paymentMethod"
                        value="cod"
                        id="check-payment"
                      />
                      <label class="form-check-label" for="cod">
                        Cash on delivery
                      </label>
                    </div>
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="radio"
                        name="paymentMethod"
                        value="onlinepayment"
                        id="check-payment1"
                      />
                      <label class="form-check-label" for="onlinepayment">
                        Online payment
                      </label>
                    </div>
                    
                    
                    
                     
                   
                    
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="radio"
                        name="paymentMethod"
                        value="wallet"
                        id="check-payment2"
                        <% if (isWalletDisabled) { %>disabled<% } %>
                      />
                    
                      <label class="form-check-label" for="check-payment2">
                        Wallet
                      </label>
                    </div>
                    
                        
                    </div>
                  </div>
                  
                    <button
                      style="margin-top: 20px"
                      type="button"
                      class="btn btn-primary"
                      data-toggle="modal"
                      data-target="#exampleModal"
                      data-whatever="@mdo"
                      id="confirmation"
                    >
                      Confirm Order
                    </button>
                  
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Button trigger modal -->

    <!-- Modal -->
    <div
      class="modal fade"
      id="exampleModal"
      tabindex="-1"
      aria-labelledby="exampleModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h1 class="modal-title fs-5" id="exampleModalLabel">
              Add new address
            </h1>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form class="row g-3">
              <div style="margin-bottom: 30px" class="col-12">
                <label for="inputAddress" class="form-label">Address</label>
                <input
                  type="text"
                  class="form-control"
                  id="inputAddress"
                  placeholder="1234 Main St"
                  name="fullAddress"
                  required
                />
              </div>

              <div class="col-md-6">
                <label for="inputCity" class="form-label">City</label>
                <input
                  type="text"
                  class="form-control"
                  id="inputCity"
                  name="city"
                  required
                />
              </div>
              <div class="col-md-6">
                <label for="inputLocality" class="form-label">Locality</label>
                <input
                  type="text"
                  class="form-control"
                  id="inputLocality"
                  name="locality"
                  required
                />
              </div>
              <div class="col-md-3">
                <label for="inputCity" class="form-label">State</label>
                <input
                  type="text"
                  class="form-control"
                  id="inputState"
                  name="state"
                  required
                />
              </div>

              <div class="col-md-3">
                <label for="inputZip" class="form-label">pincode</label>
                <input
                  type="text"
                  class="form-control"
                  id="inputZip"
                  name="pincode"
                  required
                />
              </div>

              <div style="margin-top: 20px" class="col-12">
                <button id="saveButton" type="submit" class="btn btn-primary">
                  Save
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- footer -->
    <%- include('../partials/footer.ejs') %>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
      
      let totalPrice = document.getElementById("totalPrice").innerHTML
      document
        .getElementById("saveButton")
        .addEventListener("click", function () {
          // Get the input values from the form
          const fullAddress = document.getElementById("inputAddress").value;
          const city = document.getElementById("inputCity").value;
          const locality = document.getElementById("inputLocality").value;
          const state = document.getElementById("inputState").value;
          const pincode = document.getElementById("inputZip").value;

          // Create an object with the address data
          const addressData = {
            fullAddress: fullAddress,
            city: city,
            locality: locality,
            state: state,
            pincode: pincode,
          };

          // Send the address data to the server (you'll need an AJAX request for this)
          // Here, we're assuming you're using the fetch API to make a POST request to your server
          fetch("/profile/save_address", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(addressData),
          })
            .then((response) => response.json())
            .then((data) => {
              // Handle the response from the server (e.g., display a success message)
              if (data.success) {
                alert("Address saved successfully!");
              } else {
                alert("Address not saved. Please try again.");
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              alert("An error occurred while saving the address.");
            });
        });
      const payment = document.getElementById("check-payment");
      const onlinePayment = document.getElementById("check-payment1");
      const walletPayment = document.getElementById("check-payment2");
      const orderLink = document.getElementById("confirmation");
      const addressCheckboxes = document.querySelectorAll(".address-checkbox");

      
        // document.getElementById("confirmation").addEventListener("click", async (e) => {
      orderLink.addEventListener("click", async (e) => {
         const selectedAddresses = [];


        // Check each address checkbox
        addressCheckboxes.forEach((checkbox) => {
          if (checkbox.checked) {
            // Get the data-address attribute value, which should contain the selected address data
            const addressData = JSON.parse(
              checkbox.getAttribute("data-address")
            );

            if (addressData) {
              // Assuming addressData contains necessary information, you can access specific fields
              const addressText = addressData.fullAddress;
              selectedAddresses.push(addressText); // Add the selected address to the array
            }
          }
        });

        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

        if (payment.checked && selectedAddresses.length > 0) {
          console.log("Selected Addresses: ", selectedAddresses);

          // Now, update the order link with selected addresses (you can adjust the format as needed)
          window.location.href = `/product/order?addresses=${selectedAddresses.join(
            ","
          )}&paymentMethod=${paymentMethod}`;
        } else if (onlinePayment.checked && selectedAddresses.length > 0) {
         
          const couponIsEmpty = document.getElementById("coupon").innerHTML;
          console.log("hello",couponIsEmpty);
          console.log(totalPrice,selectedAddresses);
          
          const newTotal = document.getElementById("amountAfterDiscount").innerHTML
          const text = newTotal;
          const regex = /₹(\d+)/; // This regex pattern captures one or more digits following the ₹ symbol.

          const match = text.match(regex);

          if (match) {
            const amount = match[1]; // The captured numeric value is in match[1].
            totalPrice = amount;
            console.log("Total Amount: " + amount);
          } else {
            console.log("Total Amount not found in the text.");
          }

          console.log("new total1",totalPrice);
          // Create a Razorpay order and obtain the order ID
          const response = await fetch("/onlinepayment", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ totalAmount: totalPrice }),
          })
          .then(response => response.json())
            .then(data =>{
              console.log(data);
            
                const options = {
                "key": "rzp_test_DU7TaXOm4TiDTg", // Enter the Key ID generated from the Dashboard
                "amount": data.order.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                "currency": "INR",
                "name": data.name, //your business name
                "description": "Test Transaction",
                "image": "",
                "order_id": data.order.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
                "callback_url":`/product/order?addresses=${selectedAddresses.join(
            ","
          )}&paymentMethod=${paymentMethod}`,
                "prefill": { //We recommend using the prefill parameter to auto-fill customer's contact information especially their phone number
                    // "name": "Gaurav Kumar", //your customer's name
                    // "email": "",
                    // "contact": "" //Provide the customer's phone number for better conversion rates 
                },
                "notes": {
                    "address": "Razorpay Corporate Office"
                },
                "theme": {
                    "color": "#3399cc"
                }
            };
            const rzp1 = new Razorpay(options);
            rzp1.open();
            })
        
        } else if (walletPayment.checked && selectedAddresses.length > 0){
          window.location.href = `/product/order/wallet?addresses=${selectedAddresses.join(
            ","
          )}&paymentMethod=${paymentMethod}`;
        }else {
          e.preventDefault();
          console.log(
            "Select payment (cash on delivery) or online payment or wallet payment and at least one address."
          );
        }
      });

      // script for checking the coupons
      document.getElementById("check-coupon").addEventListener("click", async function () {
        const couponCode = document.getElementById("coupon").value; // Get the entered coupon code
        const errorMessageElement = document.getElementById("errorMessage"); // Get the error message element
        
        try {
          // Make an AJAX request to check the coupon and get the discount details
          const response = await fetch(`/product/cart/coupon?code=${couponCode}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ code: couponCode }),
          });

          if (response.ok) {
            const data = await response.json();
            if (data.success) {
              // Update the hidden sections with the discount details
              document.getElementById("discountPercent").textContent = `Discount Percent: ${data.discountPercent}%`;
              document.getElementById("amountAfterDiscount").textContent = `Total: ₹${data.amountAfterDiscount}`;

              // Show the hidden sections
              document.getElementById("discountSection").removeAttribute("hidden");
              document.getElementById("clear-coupon").style.display = "inline-block"; // Show the clear button
              // Clear any previous error message
              errorMessageElement.textContent = "";
            } else {
              // Handle the case when the coupon is invalid
              errorMessageElement.textContent = "Invalid coupon. Please try another one.";
              console.log("Coupon is invalid.");
              // You can show an error message or take appropriate action.
              document.getElementById("clear-coupon").style.display = "none";
            }
          } else {
            console.log("Network error:", response.status);
            // Handle network errors
          }
        } catch (error) {
          console.error("Error while checking the coupon:", error);
          // Handle other errors
        }
      });


      document.getElementById("clear-coupon").addEventListener("click", async function () {
        const couponCode = document.getElementById("coupon").value;
        const errorMessageElement = document.getElementById("errorMessage");

        try {
            const response = await fetch(`/clear-coupon?couponCode=${couponCode}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ couponCode }),
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    // Coupon cleared successfully, you can perform any additional frontend actions here
                    console.log(data.message);

                    // Additionally, you might want to hide the discount section and clear the coupon input
                    document.getElementById("coupon").value = "";
                    document.getElementById("discountSection").setAttribute("hidden", "true");
                    document.getElementById("clear-coupon").style.display = "none";
                } else {
                    // Handle the case when the coupon is not found on the server
                    errorMessageElement.textContent = data.message;
                }
            } else {
                console.log('Network error:', response.status);
            }
        } catch (error) {
            console.error('Error while clearing the coupon:', error);
        }
    });

    // script for showing the available offers 

    $(document).ready(function() {
      $("#check-offers").on("click", function() {
        $.ajax({
          url: "/offers", // Update this with the correct endpoint
          type: "GET",
          dataType: "json",
          success: function(response) {
            if (response.success) {
              // Assuming the 'offers' property is an array of offer objects
              const offers = response.offers;

              // Build HTML to display offers
              let offersHTML = "<ul>";
              offers.forEach(offer => {
                offersHTML += `<li>${offer.category}: &#8377 ${offer.discount} off</li>`;
                // Adjust this based on your offer object structure
              });
              offersHTML += "</ul>";

              // Display the offers in the offers-container div
              $("#offers-container").html(offersHTML).show();
            } else {
              console.error("Failed to retrieve offers:", response.message);
            }
          },
          error: function(error) {
            console.error("Error while fetching offers:", error);
          }
        });
      });
    });


    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"
    ></script>
    <script>
      $(document).ready(function() {
        const loader = $('#loader');
        const dimmedBackground = $('#dimmedBackground');
    
        // Show the loader and dimmed background
        loader.show();
        dimmedBackground.show();
    
        // After 2 seconds (adjust this delay as needed), hide the loader and dimmed background
        setTimeout(function() {
          loader.hide();
          dimmedBackground.hide();
        }, 1000); // 2 seconds
      });
    </script>

  </body>
</html>
